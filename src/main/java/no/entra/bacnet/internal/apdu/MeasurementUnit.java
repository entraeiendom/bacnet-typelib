package no.entra.bacnet.internal.apdu;

import no.entra.bacnet.octet.Octet;

import static java.lang.Integer.parseInt;

public enum MeasurementUnit {
    AmpereSeconds(238),
    AmpereSquareHours(246),
    AmpereSquareMeters(169),
    Amperes(3),
    AmperesPerMeter(167),
    AmperesPerSquareMeter(168),
    Bars(55),
    Becquerels(222),
    Btus(20),
    BtusPerHour(50),
    BtusPerPound(117),
    BtusPerPoundDryAir(24),
    Candelas(179),
    CandelasPerSquareMeter(180),
    Centimeters(118),
    CentimetersOfMercury(60),
    CentimetersOfWater(57),
    CubicFeet(79),
    CubicFeetPerDay(248),
    CubicFeetPerHour(191),
    CubicFeetPerMinute(84),
    CubicFeetPerSecond(142),
    CubicMeters(80),
    CubicMetersPerDay(249),
    CubicMetersPerHour(135),
    CubicMetersPerMinute(165),
    CubicMetersPerSecond(85),
    Currency1(105),
    Currency10(114),
    Currency2(106),
    Currency3(107),
    Currency4(108),
    Currency5(109),
    Currency6(110),
    Currency7(111),
    Currency8(112),
    Currency9(113),
    CyclesPerHour(25),
    CyclesPerMinute(26),
    Days(70),
    Decibels(199),
    DecibelsA(232),
    DecibelsMillivolt(200),
    DecibelsVolt(201),
    DegreeDaysCelsius(65),
    DegreeDaysFahrenheit(66),
    DegreesAngular(90),
    DegreesCelsius(62),
    DegreesCelsiusPerHour(91),
    DegreesCelsiusPerMinute(92),
    DegreesFahrenheit(64),
    DegreesFahrenheitPerHour(93),
    DegreesFahrenheitPerMinute(94),
    DegreesKelvin(63),
    DegreesKelvinPerHour(181),
    DegreesKelvinPerMinute(182),
    DegreesPhase(14),
    DeltaDegreesFahrenheit(120),
    DeltaDegreesKelvin(121),
    Farads(170),
    Feet(33),
    FeetPerMinute(77),
    FeetPerSecond(76),
    FootCandles(38),
    Grams(195),
    GramsOfWaterPerKilogramDryAir(28),
    GramsPerCubicCentimeter(221),
    GramsPerCubicMeter(217),
    GramsPerGram(208),
    GramsPerKilogram(210),
    GramsPerLiter(214),
    GramsPerMilliliter(213),
    GramsPerMinute(155),
    GramsPerSecond(154),
    GramsPerSquareMeter(235),
    Gray(225),
    Hectopascals(133),
    Henrys(171),
    Hertz(27),
    Horsepower(51),
    Hours(71),
    HundredthsSeconds(158),
    ImperialGallons(81),
    ImperialGallonsPerMinute(86),
    Inches(32),
    InchesOfMercury(61),
    InchesOfWater(58),
    JoulePerHours(247),
    JouleSeconds(183),
    Joules(16),
    JoulesPerCubicMeter(251),
    JoulesPerDegreeKelvin(127),
    JoulesPerKilogramDegreeKelvin(128),
    JoulesPerKilogramDryAir(23),
    KiloBtus(147),
    KiloBtusPerHour(157),
    Kilobecquerels(223),
    Kilograms(39),
    KilogramsPerCubicMeter(186),
    KilogramsPerHour(44),
    KilogramsPerKilogram(209),
    KilogramsPerMinute(43),
    KilogramsPerSecond(42),
    Kilohertz(129),
    Kilohms(122),
    Kilojoules(17),
    KilojoulesPerDegreeKelvin(151),
    KilojoulesPerKilogram(125),
    KilojoulesPerKilogramDryAir(149),
    Kilometers(193),
    KilometersPerHour(75),
    Kilopascals(54),
    KilovoltAmpereHours(240),
    KilovoltAmpereHoursReactive(243),
    KilovoltAmperes(9),
    KilovoltAmperesReactive(12),
    Kilovolts(6),
    KilowattHours(19),
    KilowattHoursPerSquareFoot(138),
    KilowattHoursPerSquareMeter(137),
    KilowattHoursReactive(204),
    Kilowatts(48),
    Liters(82),
    LitersPerHour(136),
    LitersPerMinute(88),
    LitersPerSecond(87),
    Lumens(36),
    Luxes(37),
    MegaBtus(148),
    Megabecquerels(224),
    Megahertz(130),
    Megajoules(126),
    MegajoulesPerDegreeKelvin(152),
    MegajoulesPerKilogramDryAir(150),
    MegajoulesPerSquareFoot(140),
    MegajoulesPerSquareMeter(139),
    MegavoltAmpereHours(241),
    MegavoltAmpereHoursReactive(244),
    MegavoltAmperes(10),
    MegavoltAmperesReactive(13),
    Megavolts(7),
    MegawattHours(146),
    MegawattHoursReactive(205),
    Megawatts(49),
    Megohms(123),
    Meters(31),
    MetersPerHour(164),
    MetersPerMinute(163),
    MetersPerSecond(74),
    MetersPerSecondPerSecond(166),
    MicroSiemens(190),
    MicrogramsPerCubicMeter(219),
    MicrogramsPerLiter(216),
    Microgray(227),
    Micrometers(194),
    Microsieverts(230),
    MicrosievertsPerHour(231),
    MilesPerHour(78),
    Milliamperes(2),
    Millibars(134),
    Milligrams(196),
    MilligramsPerCubicMeter(218),
    MilligramsPerGram(211),
    MilligramsPerKilogram(212),
    MilligramsPerLiter(215),
    Milligray(226),
    Milliliters(197),
    MillilitersPerSecond(198),
    Millimeters(30),
    MillimetersOfMercury(59),
    MillimetersOfWater(206),
    MillimetersPerMinute(162),
    MillimetersPerSecond(161),
    Milliohms(145),
    MillionStandardCubicFeetPerDay(47809),
    MillionStandardCubicFeetPerMinute(254),
    Millirems(47814),
    MilliremsPerHour(47815),
    Milliseconds(159),
    Millisiemens(202),
    Millisieverts(229),
    Millivolts(124),
    Milliwatts(132),
    Minutes(72),
    MinutesPerDegreeKelvin(236),
    MolePercent(252),
    Months(68),
    NanogramsPerCubicMeter(220),
    NephelometricTurbidityUnit(233),
    Newton(153),
    NewtonMeters(160),
    NewtonSeconds(187),
    NewtonsPerMeter(188),
    NoUnits(95),
    OhmMeterSquaredPerMeter(237),
    OhmMeters(172),
    Ohms(4),
    PartsPerBillion(97),
    PartsPerMillion(96),
    PascalSeconds(253),
    Pascals(53),
    PerHour(131),
    PerMille(207),
    PerMinute(100),
    PerSecond(101),
    Percent(98),
    PercentObscurationPerFoot(143),
    PercentObscurationPerMeter(144),
    PercentPerSecond(99),
    PercentRelativeHumidity(29),
    PH(234),
    PoundsForcePerSquareInch(56),
    PoundsMass(40),
    PoundsMassPerDay(47812),
    PoundsMassPerHour(46),
    PoundsMassPerMinute(45),
    PoundsMassPerSecond(119),
    PowerFactor(15),
    PsiPerDegreeFahrenheit(102),
    Radians(103),
    RadiansPerSecond(184),
    RevolutionsPerMinute(104),
    Seconds(73),
    Siemens(173),
    SiemensPerMeter(174),
    Sieverts(228),
    SquareCentimeters(116),
    SquareFeet(1),
    SquareInches(115),
    SquareMeters(0),
    SquareMetersPerNewton(185),
    StandardCubicFeetPerDay(47808),
    Teslas(175),
    Therms(21),
    ThousandCubicFeetPerDay(47810),
    ThousandStandardCubicFeetPerDay(47811),
    TonHours(22),
    Tons(41),
    TonsPerHour(156),
    TonsRefrigeration(52),
    UsGallons(83),
    UsGallonsPerHour(192),
    UsGallonsPerMinute(89),
    VoltAmpereHours(239),
    VoltAmpereHoursReactive(242),
    VoltAmperes(8),
    VoltAmperesReactive(11),
    VoltSquareHours(245),
    Volts(5),
    VoltsPerDegreeKelvin(176),
    VoltsPerMeter(177),
    WattHours(18),
    WattHoursPerCubicMeter(250),
    WattHoursReactive(203),
    Watts(47),
    WattsPerMeterPerDegreeKelvin(189),
    WattsPerSquareFoot(34),
    WattsPerSquareMeter(35),
    WattsPerSquareMeterDegreeKelvin(141),
    Webers(178),
    Weeks(69),
    Years(67);

    private int MeasurementUnitInt;

    public static MeasurementUnit fromMeasurementUnitInt(int MeasurementUnitInt) {
        for (MeasurementUnit type : values()) {
            if (type.getMeasurementUnitInt() == MeasurementUnitInt) {
                return type;
            }
        }
        return null;
    }

    public static MeasurementUnit fromChar(char nibble) throws NumberFormatException {
        int measurementUnitInt = parseInt(String.valueOf(nibble), 16);
        MeasurementUnit measurementUnit = fromMeasurementUnitInt(measurementUnitInt);
        return measurementUnit;
    }

    public static MeasurementUnit fromOctet(Octet MeasurementUnitOctet) throws NumberFormatException {
        if (MeasurementUnitOctet == null) {
            return null;
        }
        Integer measurementUnitInt = parseInt(MeasurementUnitOctet.toString(), 16);
        MeasurementUnit measurementUnit = fromMeasurementUnitInt(measurementUnitInt.intValue());
        return measurementUnit;
    }


    public int getMeasurementUnitInt() {
        return MeasurementUnitInt;
    }

    // enum constructor - cannot be public or protected
    private MeasurementUnit(int MeasurementUnitInt) {
        this.MeasurementUnitInt = MeasurementUnitInt;
    }

}
